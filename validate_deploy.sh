#!/usr/bin/env bash
# Script de validaci√≥n completa pre-deploy
set -e

echo "=========================================="
echo "üîç VALIDACI√ìN COMPLETA PRE-DEPLOY"
echo "=========================================="

cd /workspaces/soptraloc

# 1. Verificar estructura del proyecto
echo ""
echo "1Ô∏è‚É£ Verificando estructura del proyecto..."
if [ -d "soptraloc_system" ]; then
    echo "‚úÖ Directorio soptraloc_system existe"
else
    echo "‚ùå ERROR: soptraloc_system no encontrado"
    exit 1
fi

if [ -f "soptraloc_system/config/wsgi.py" ]; then
    echo "‚úÖ config/wsgi.py existe"
else
    echo "‚ùå ERROR: wsgi.py no encontrado"
    exit 1
fi

if [ -f "soptraloc_system/config/settings_production.py" ]; then
    echo "‚úÖ config/settings_production.py existe"
else
    echo "‚ùå ERROR: settings_production.py no encontrado"
    exit 1
fi

# 2. Verificar archivos de deploy
echo ""
echo "2Ô∏è‚É£ Verificando archivos de deploy..."
for file in render.yaml build.sh post_deploy.sh requirements.txt; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
    else
        echo "‚ùå ERROR: $file no encontrado"
        exit 1
    fi
done

# 3. Verificar permisos
echo ""
echo "3Ô∏è‚É£ Verificando permisos de scripts..."
for script in build.sh post_deploy.sh; do
    if [ -x "$script" ]; then
        echo "‚úÖ $script es ejecutable"
    else
        echo "‚ö†Ô∏è  Corrigiendo permisos de $script"
        chmod +x "$script"
    fi
done

# 4. Validar render.yaml
echo ""
echo "4Ô∏è‚É£ Validando render.yaml..."
if grep -q "startCommand:" render.yaml; then
    echo "‚úÖ startCommand encontrado"
else
    echo "‚ùå ERROR: startCommand no encontrado en render.yaml"
    exit 1
fi

if grep -q "config.wsgi:application" render.yaml; then
    echo "‚úÖ config.wsgi:application configurado"
else
    echo "‚ùå ERROR: config.wsgi:application no encontrado"
    exit 1
fi

if grep -q "soptraloc-db" render.yaml; then
    echo "‚úÖ Base de datos soptraloc-db configurada"
else
    echo "‚ùå ERROR: Base de datos no configurada"
    exit 1
fi

# 5. Verificar que NO existe app.py en la ra√≠z
echo ""
echo "5Ô∏è‚É£ Verificando que app.py NO existe..."
if [ -f "app.py" ]; then
    echo "‚ùå ERROR: app.py existe (debe eliminarse)"
    exit 1
else
    echo "‚úÖ app.py NO existe (correcto)"
fi

# 6. Validar settings_production.py
echo ""
echo "6Ô∏è‚É£ Validando settings_production.py..."
cd soptraloc_system

if python -c "from config import settings_production; print('‚úÖ settings_production se importa correctamente')"; then
    echo "‚úÖ settings_production v√°lido"
else
    echo "‚ùå ERROR: Error al importar settings_production"
    exit 1
fi

# 7. Verificar modelos
echo ""
echo "7Ô∏è‚É£ Verificando modelos de Django..."
export DJANGO_SETTINGS_MODULE=config.settings_production
export SECRET_KEY="test-key-for-validation"
export DATABASE_URL="sqlite:///test.db"

if python manage.py check --deploy 2>&1 | grep -q "System check identified no issues"; then
    echo "‚úÖ Django check passed"
else
    echo "‚ö†Ô∏è  Django check tiene advertencias (revisar manualmente)"
fi

# 8. Verificar comando load_initial_times
echo ""
echo "8Ô∏è‚É£ Verificando comando load_initial_times..."
if [ -f "apps/routing/management/commands/load_initial_times.py" ]; then
    echo "‚úÖ load_initial_times.py existe"
else
    echo "‚ùå ERROR: load_initial_times.py no encontrado"
    exit 1
fi

# 9. Contar modelos
echo ""
echo "9Ô∏è‚É£ Contando modelos..."
MODEL_COUNT=$(find apps -name "models.py" -exec grep -l "class.*models.Model" {} \; | wc -l)
echo "‚úÖ $MODEL_COUNT archivos de modelos encontrados"

# 10. Verificar staticfiles
echo ""
echo "üîü Verificando configuraci√≥n de static files..."
if grep -q "STATIC_ROOT" config/settings_production.py; then
    echo "‚úÖ STATIC_ROOT configurado"
else
    echo "‚ùå ERROR: STATIC_ROOT no configurado"
    exit 1
fi

cd ..

# Resumen final
echo ""
echo "=========================================="
echo "‚úÖ VALIDACI√ìN COMPLETA EXITOSA"
echo "=========================================="
echo ""
echo "üìä RESUMEN:"
echo "  ‚úÖ Estructura del proyecto: OK"
echo "  ‚úÖ Archivos de deploy: OK"
echo "  ‚úÖ Permisos de scripts: OK"
echo "  ‚úÖ render.yaml: V√ÅLIDO"
echo "  ‚úÖ app.py: NO EXISTE (correcto)"
echo "  ‚úÖ settings_production.py: V√ÅLIDO"
echo "  ‚úÖ Django check: OK"
echo "  ‚úÖ Comandos de management: OK"
echo "  ‚úÖ Configuraci√≥n de static: OK"
echo ""
echo "üöÄ LISTO PARA DEPLOY EN RENDER"
echo "=========================================="
