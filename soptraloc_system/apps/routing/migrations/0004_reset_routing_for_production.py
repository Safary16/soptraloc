# Generated by Django 5.2.6 on 2025-10-10 - MANUAL RESET
"""
Migraci√≥n de RESET para tablas de routing en producci√≥n.

PROBLEMA: Las tablas routing fueron creadas con FKs tipo UUID apuntando a core.driver,
pero ahora driver est√° en drivers.driver con BigAutoField (bigint).

SOLUCI√ìN: Elimina y recrea SOLO las tablas de routing, preservando:
- Location (core_location) - NO SE TOCA
- Driver (drivers) - NO SE TOCA  
- Container - NO SE TOCA
- Toda la l√≥gica de importaci√≥n - NO SE TOCA

Solo recreamos routing con los tipos correctos.
"""

from django.db import migrations, models, connection
import django.core.validators
import django.db.models.deletion
import uuid


def reset_routing_tables(apps, schema_editor):
    """
    Elimina y recrea tablas de routing SOLO si estamos en PostgreSQL.
    SQLite local no necesita cambios.
    """
    if connection.vendor != 'postgresql':
        print("‚úì SQLite detectado - skip reset (local funciona OK)")
        return
    
    print("üîß PostgreSQL detectado - iniciando reset de routing...")
    
    with connection.cursor() as cursor:
        # 1. Eliminar tablas routing en orden (respetando FKs)
        tables_to_drop = [
            'routing_routestop',
            'routing_actualtriprecord', 
            'routing_actualoperationrecord',
            'routing_operationtime',
            'routing_locationpair',
            'routing_route',
        ]
        
        for table in tables_to_drop:
            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
            print(f"  ‚úì Eliminada tabla: {table}")
        
        # 2. Limpiar historial de migraciones de routing
        cursor.execute("""
            DELETE FROM django_migrations 
            WHERE app = 'routing' AND name IN (
                '0001_initial',
                '0002_alter_actualoperationrecord_location_and_more',
                '0003_alter_actualoperationrecord_location_and_more'
            );
        """)
        print("  ‚úì Limpiado historial de migraciones de routing")
        
    print("‚úÖ Reset completado - routing listo para recreaci√≥n")


def reverse_reset(apps, schema_editor):
    """No podemos revertir un reset - solo hacia adelante"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("routing", "0003_alter_actualoperationrecord_location_and_more"),
        ("drivers", "0016_trim_driver_count"),
        ("containers", "0010_alter_container_current_location_and_more"),
    ]

    operations = [
        # PASO 1: Reset de tablas (solo en Postgres)
        migrations.RunPython(reset_routing_tables, reverse_reset),
        
        # PASO 2: Recrear desde cero con tipos correctos
        migrations.CreateModel(
            name="LocationPair",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "base_travel_time",
                    models.IntegerField(
                        help_text="Tiempo base de viaje en minutos (sin tr√°fico)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "peak_hour_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        help_text="Multiplicador para horas pico (ej: 1.5 = +50%)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(3.0),
                        ],
                    ),
                ),
                (
                    "peak_hours_start",
                    models.TimeField(default="08:00", help_text="Inicio hora pico (ej: 08:00)"),
                ),
                (
                    "peak_hours_end",
                    models.TimeField(default="10:00", help_text="Fin hora pico (ej: 10:00)"),
                ),
                (
                    "peak_hours_2_start",
                    models.TimeField(default="18:00", help_text="Inicio segunda hora pico"),
                ),
                (
                    "peak_hours_2_end",
                    models.TimeField(default="20:00", help_text="Fin segunda hora pico"),
                ),
                (
                    "distance_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Distancia en kil√≥metros",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "route_type",
                    models.CharField(
                        choices=[
                            ("URBAN", "Urbano"),
                            ("HIGHWAY", "Carretera"),
                            ("MIXED", "Mixto"),
                            ("PORT_ACCESS", "Acceso Portuario"),
                        ],
                        default="MIXED",
                        max_length=20,
                    ),
                ),
                (
                    "ml_predicted_time",
                    models.IntegerField(
                        blank=True,
                        help_text="Tiempo predicho por ML en minutos",
                        null=True,
                    ),
                ),
                (
                    "ml_confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        help_text="Confianza del modelo ML (0-100%)",
                    ),
                ),
                (
                    "use_ml_prediction",
                    models.BooleanField(
                        default=False,
                        help_text="¬øUsar predicci√≥n ML o tiempo manual?",
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes_to",
                        to="drivers.location",
                        verbose_name="Destino",
                    ),
                ),
                (
                    "origin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes_from",
                        to="drivers.location",
                        verbose_name="Origen",
                    ),
                ),
            ],
            options={
                "verbose_name": "Par de Ubicaciones (Ruta)",
                "verbose_name_plural": "Pares de Ubicaciones",
                "ordering": ["origin", "destination"],
                "unique_together": {("origin", "destination")},
            },
        ),
        migrations.CreateModel(
            name="OperationTime",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("CHASSIS_HOOK", "Enganchar Chasis"),
                            ("CHASSIS_UNHOOK", "Desenganchar Chasis"),
                            ("CONTAINER_LOAD", "Cargar Contenedor"),
                            ("CONTAINER_UNLOAD", "Descargar Contenedor"),
                            ("PORT_GATE_IN", "Ingreso a Puerto"),
                            ("PORT_GATE_OUT", "Salida de Puerto"),
                            ("WAREHOUSE_CHECKIN", "Check-in Almac√©n"),
                            ("WAREHOUSE_CHECKOUT", "Check-out Almac√©n"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "base_time_minutes",
                    models.IntegerField(
                        help_text="Tiempo base de operaci√≥n en minutos",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "ml_predicted_time",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "ml_confidence",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_times",
                        to="drivers.location",
                        verbose_name="Ubicaci√≥n",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tiempo de Operaci√≥n",
                "verbose_name_plural": "Tiempos de Operaciones",
                "ordering": ["location", "operation_type"],
                "unique_together": {("location", "operation_type")},
            },
        ),
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre descriptivo de la ruta", max_length=200
                    ),
                ),
                ("route_date", models.DateField(verbose_name="Fecha de la ruta")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Borrador"),
                            ("PLANNED", "Planificada"),
                            ("IN_PROGRESS", "En Progreso"),
                            ("COMPLETED", "Completada"),
                            ("CANCELLED", "Cancelada"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("estimated_start", models.DateTimeField(blank=True, null=True)),
                ("estimated_end", models.DateTimeField(blank=True, null=True)),
                ("estimated_duration", models.IntegerField(blank=True, null=True)),
                ("actual_start", models.DateTimeField(blank=True, null=True)),
                ("actual_end", models.DateTimeField(blank=True, null=True)),
                ("actual_duration", models.IntegerField(blank=True, null=True)),
                (
                    "total_distance_km",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("total_containers", models.IntegerField(default=0)),
                ("completed_stops", models.IntegerField(default=0)),
                ("notes", models.TextField(blank=True)),
                (
                    "driver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes",
                        to="drivers.driver",
                        verbose_name="Conductor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ruta",
                "verbose_name_plural": "Rutas",
                "ordering": ["-route_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RouteStop",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "stop_order",
                    models.IntegerField(
                        help_text="Orden de la parada (1, 2, 3...)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("PICKUP", "Retiro"),
                            ("DELIVERY", "Entrega"),
                            ("TRANSFER", "Transferencia"),
                            ("INSPECTION", "Inspecci√≥n"),
                        ],
                        max_length=20,
                    ),
                ),
                ("planned_arrival", models.DateTimeField(blank=True, null=True)),
                ("planned_departure", models.DateTimeField(blank=True, null=True)),
                ("estimated_operation_time", models.IntegerField(blank=True, null=True)),
                ("actual_arrival", models.DateTimeField(blank=True, null=True)),
                ("actual_departure", models.DateTimeField(blank=True, null=True)),
                ("actual_operation_time", models.IntegerField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("completion_notes", models.TextField(blank=True)),
                ("delay_minutes", models.IntegerField(blank=True, null=True)),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_stops",
                        to="containers.container",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="drivers.location",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stops",
                        to="routing.route",
                    ),
                ),
            ],
            options={
                "verbose_name": "Parada de Ruta",
                "verbose_name_plural": "Paradas de Rutas",
                "ordering": ["route", "stop_order"],
            },
        ),
        migrations.CreateModel(
            name="ActualTripRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("duration_minutes", models.IntegerField()),
                ("distance_km", models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                (
                    "day_of_week",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ]
                    ),
                ),
                (
                    "hour_of_day",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ]
                    ),
                ),
                ("had_delays", models.BooleanField(default=False)),
                ("delay_reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trip_records",
                        to="containers.container",
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trips_to",
                        to="drivers.location",
                    ),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="drivers.driver",
                    ),
                ),
                (
                    "origin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trips_from",
                        to="drivers.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Viaje Real",
                "verbose_name_plural": "Registros de Viajes Reales",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="ActualOperationRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("CHASSIS_HOOK", "Enganchar Chasis"),
                            ("CHASSIS_UNHOOK", "Desenganchar Chasis"),
                            ("CONTAINER_LOAD", "Cargar Contenedor"),
                            ("CONTAINER_UNLOAD", "Descargar Contenedor"),
                            ("CONTAINER_TO_FLOOR", "Bajar a Piso"),
                            ("CONTAINER_FROM_FLOOR", "Levantar de Piso"),
                            ("PORT_GATE_IN", "Ingreso a Puerto"),
                            ("PORT_GATE_OUT", "Salida de Puerto"),
                            ("PORT_PICKUP", "Retiro en Puerto"),
                            ("PORT_DELIVERY", "Entrega en Puerto"),
                            ("WAREHOUSE_CHECKIN", "Check-in Almac√©n"),
                            ("WAREHOUSE_CHECKOUT", "Check-out Almac√©n"),
                            ("WAREHOUSE_STORAGE", "Almacenaje"),
                            ("CLIENT_DELIVERY", "Entrega Cliente"),
                            ("CLIENT_PICKUP", "Retiro Cliente"),
                            ("PAPERWORK", "Tr√°mites/Documentos"),
                            ("INSPECTION", "Inspecci√≥n"),
                            ("WAITING", "Espera"),
                            ("FUELING", "Carga Combustible"),
                        ],
                        max_length=30,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("duration_minutes", models.IntegerField()),
                (
                    "day_of_week",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ]
                    ),
                ),
                (
                    "hour_of_day",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ]
                    ),
                ),
                ("container_size", models.CharField(blank=True, max_length=10)),
                ("had_issues", models.BooleanField(default=False)),
                ("issue_description", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_records",
                        to="containers.container",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_records",
                        to="drivers.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Operaci√≥n Real",
                "verbose_name_plural": "Registros de Operaciones Reales",
                "ordering": ["-start_time"],
            },
        ),
    ]
