# Generated by Django 5.2.6 on 2025-10-01 01:22

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("containers", "0005_add_timing_fields"),
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ActualOperationRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("CHASSIS_HOOK", "Enganchar Chasis"),
                            ("CHASSIS_UNHOOK", "Desenganchar Chasis"),
                            ("CONTAINER_LOAD", "Cargar Contenedor"),
                            ("CONTAINER_UNLOAD", "Descargar Contenedor"),
                            ("CONTAINER_TO_FLOOR", "Bajar a Piso"),
                            ("CONTAINER_FROM_FLOOR", "Levantar de Piso"),
                            ("PORT_GATE_IN", "Ingreso a Puerto"),
                            ("PORT_GATE_OUT", "Salida de Puerto"),
                            ("PORT_PICKUP", "Retiro en Puerto"),
                            ("PORT_DELIVERY", "Entrega en Puerto"),
                            ("WAREHOUSE_CHECKIN", "Check-in Almacén"),
                            ("WAREHOUSE_CHECKOUT", "Check-out Almacén"),
                            ("WAREHOUSE_STORAGE", "Almacenaje"),
                            ("CLIENT_DELIVERY", "Entrega Cliente"),
                            ("CLIENT_PICKUP", "Retiro Cliente"),
                            ("PAPERWORK", "Trámites/Documentos"),
                            ("INSPECTION", "Inspección"),
                            ("WAITING", "Espera"),
                            ("FUELING", "Carga Combustible"),
                        ],
                        max_length=30,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("duration_minutes", models.IntegerField()),
                (
                    "day_of_week",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ]
                    ),
                ),
                (
                    "hour_of_day",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ]
                    ),
                ),
                ("container_size", models.CharField(blank=True, max_length=10)),
                ("had_issues", models.BooleanField(default=False)),
                ("issue_description", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_records",
                        to="containers.container",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_records",
                        to="core.location",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Operación Real",
                "verbose_name_plural": "Registros de Operaciones Reales",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="Route",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre descriptivo de la ruta", max_length=200
                    ),
                ),
                ("route_date", models.DateField(verbose_name="Fecha de la ruta")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Borrador"),
                            ("PLANNED", "Planificada"),
                            ("IN_PROGRESS", "En Progreso"),
                            ("COMPLETED", "Completada"),
                            ("CANCELLED", "Cancelada"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                (
                    "estimated_start",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Inicio estimado"
                    ),
                ),
                (
                    "estimated_end",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fin estimado"
                    ),
                ),
                (
                    "estimated_duration",
                    models.IntegerField(
                        blank=True, help_text="Duración estimada en minutos", null=True
                    ),
                ),
                (
                    "actual_start",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Inicio real"
                    ),
                ),
                (
                    "actual_end",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fin real"
                    ),
                ),
                (
                    "actual_duration",
                    models.IntegerField(
                        blank=True, help_text="Duración real en minutos", null=True
                    ),
                ),
                (
                    "total_distance_km",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("total_containers", models.IntegerField(default=0)),
                ("completed_stops", models.IntegerField(default=0)),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes",
                        to="core.driver",
                        verbose_name="Conductor",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.vehicle",
                        verbose_name="Vehículo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ruta",
                "verbose_name_plural": "Rutas",
                "ordering": ["-route_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RouteStop",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "stop_order",
                    models.IntegerField(
                        help_text="Orden de la parada (1, 2, 3...)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("PICKUP", "Retiro"),
                            ("DELIVERY", "Entrega"),
                            ("TRANSFER", "Transferencia"),
                            ("INSPECTION", "Inspección"),
                        ],
                        max_length=20,
                        verbose_name="Tipo de Acción",
                    ),
                ),
                (
                    "planned_arrival",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Llegada planificada"
                    ),
                ),
                (
                    "planned_departure",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Salida planificada"
                    ),
                ),
                (
                    "estimated_operation_time",
                    models.IntegerField(
                        blank=True,
                        help_text="Tiempo estimado de operación en minutos",
                        null=True,
                    ),
                ),
                (
                    "actual_arrival",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Llegada real"
                    ),
                ),
                (
                    "actual_departure",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Salida real"
                    ),
                ),
                (
                    "actual_operation_time",
                    models.IntegerField(
                        blank=True,
                        help_text="Tiempo real de operación en minutos",
                        null=True,
                    ),
                ),
                (
                    "is_completed",
                    models.BooleanField(default=False, verbose_name="¿Completada?"),
                ),
                ("completion_notes", models.TextField(blank=True)),
                (
                    "delay_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Minutos de retraso (negativo si adelantado)",
                        null=True,
                    ),
                ),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_stops",
                        to="containers.container",
                        verbose_name="Contenedor",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.location",
                        verbose_name="Ubicación",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stops",
                        to="routing.route",
                        verbose_name="Ruta",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Parada de Ruta",
                "verbose_name_plural": "Paradas de Rutas",
                "ordering": ["route", "stop_order"],
            },
        ),
        migrations.CreateModel(
            name="ActualTripRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("departure_time", models.DateTimeField(verbose_name="Hora de salida")),
                ("arrival_time", models.DateTimeField(verbose_name="Hora de llegada")),
                (
                    "duration_minutes",
                    models.IntegerField(
                        help_text="Calculado automáticamente",
                        verbose_name="Duración en minutos",
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        help_text="0=Lunes, 6=Domingo",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ],
                    ),
                ),
                (
                    "hour_of_day",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(23),
                        ]
                    ),
                ),
                ("was_peak_hour", models.BooleanField(default=False)),
                ("container_size", models.CharField(blank=True, max_length=10)),
                ("container_type", models.CharField(blank=True, max_length=50)),
                (
                    "cargo_weight",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("driver_experience_days", models.IntegerField(blank=True, null=True)),
                (
                    "weather",
                    models.CharField(
                        choices=[
                            ("CLEAR", "Despejado"),
                            ("RAIN", "Lluvia"),
                            ("FOG", "Neblina"),
                            ("UNKNOWN", "Desconocido"),
                        ],
                        default="UNKNOWN",
                        max_length=20,
                    ),
                ),
                (
                    "had_delay",
                    models.BooleanField(
                        default=False, help_text="¿Hubo retraso significativo?"
                    ),
                ),
                ("delay_reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "container",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trip_records",
                        to="containers.container",
                        verbose_name="Contenedor",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trips_to",
                        to="core.location",
                        verbose_name="Destino",
                    ),
                ),
                (
                    "driver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.driver",
                        verbose_name="Conductor",
                    ),
                ),
                (
                    "origin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trips_from",
                        to="core.location",
                        verbose_name="Origen",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.vehicle",
                        verbose_name="Vehículo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de Viaje Real",
                "verbose_name_plural": "Registros de Viajes Reales",
                "ordering": ["-departure_time"],
                "indexes": [
                    models.Index(
                        fields=["origin", "destination", "departure_time"],
                        name="routing_act_origin__8d8bce_idx",
                    ),
                    models.Index(
                        fields=["day_of_week", "hour_of_day"],
                        name="routing_act_day_of__5af28c_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="LocationPair",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "base_travel_time",
                    models.IntegerField(
                        help_text="Tiempo base de viaje en minutos (sin tráfico)",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "peak_hour_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        help_text="Multiplicador para horas pico (ej: 1.5 = +50%)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(1.0),
                            django.core.validators.MaxValueValidator(3.0),
                        ],
                    ),
                ),
                (
                    "peak_hours_start",
                    models.TimeField(
                        default="08:00", help_text="Inicio hora pico (ej: 08:00)"
                    ),
                ),
                (
                    "peak_hours_end",
                    models.TimeField(
                        default="10:00", help_text="Fin hora pico (ej: 10:00)"
                    ),
                ),
                (
                    "peak_hours_2_start",
                    models.TimeField(
                        default="18:00", help_text="Inicio segunda hora pico"
                    ),
                ),
                (
                    "peak_hours_2_end",
                    models.TimeField(
                        default="20:00", help_text="Fin segunda hora pico"
                    ),
                ),
                (
                    "distance_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Distancia en kilómetros",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "route_type",
                    models.CharField(
                        choices=[
                            ("URBAN", "Urbano"),
                            ("HIGHWAY", "Carretera"),
                            ("MIXED", "Mixto"),
                            ("PORT_ACCESS", "Acceso Portuario"),
                        ],
                        default="MIXED",
                        max_length=20,
                    ),
                ),
                (
                    "ml_predicted_time",
                    models.IntegerField(
                        blank=True,
                        help_text="Tiempo predicho por ML en minutos",
                        null=True,
                    ),
                ),
                (
                    "ml_confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Confianza del modelo ML (0-100)",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "ml_last_update",
                    models.DateTimeField(
                        blank=True,
                        help_text="Última actualización del modelo ML",
                        null=True,
                    ),
                ),
                (
                    "total_trips",
                    models.IntegerField(
                        default=0, help_text="Total de viajes registrados"
                    ),
                ),
                (
                    "avg_actual_time",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Promedio de tiempo real registrado",
                        max_digits=8,
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes_to",
                        to="core.location",
                        verbose_name="Destino",
                    ),
                ),
                (
                    "origin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="routes_from",
                        to="core.location",
                        verbose_name="Origen",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Par de Ubicaciones",
                "verbose_name_plural": "Pares de Ubicaciones",
                "ordering": ["origin__name", "destination__name"],
                "indexes": [
                    models.Index(
                        fields=["origin", "destination"],
                        name="routing_loc_origin__cfcb85_idx",
                    )
                ],
                "unique_together": {("origin", "destination")},
            },
        ),
        migrations.CreateModel(
            name="OperationTime",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("CHASSIS_HOOK", "Enganchar Chasis"),
                            ("CHASSIS_UNHOOK", "Desenganchar Chasis"),
                            ("CONTAINER_LOAD", "Cargar Contenedor"),
                            ("CONTAINER_UNLOAD", "Descargar Contenedor"),
                            ("CONTAINER_TO_FLOOR", "Bajar a Piso"),
                            ("CONTAINER_FROM_FLOOR", "Levantar de Piso"),
                            ("PORT_GATE_IN", "Ingreso a Puerto"),
                            ("PORT_GATE_OUT", "Salida de Puerto"),
                            ("PORT_PICKUP", "Retiro en Puerto"),
                            ("PORT_DELIVERY", "Entrega en Puerto"),
                            ("WAREHOUSE_CHECKIN", "Check-in Almacén"),
                            ("WAREHOUSE_CHECKOUT", "Check-out Almacén"),
                            ("WAREHOUSE_STORAGE", "Almacenaje"),
                            ("CLIENT_DELIVERY", "Entrega Cliente"),
                            ("CLIENT_PICKUP", "Retiro Cliente"),
                            ("PAPERWORK", "Trámites/Documentos"),
                            ("INSPECTION", "Inspección"),
                            ("WAITING", "Espera"),
                            ("FUELING", "Carga Combustible"),
                        ],
                        max_length=30,
                        verbose_name="Tipo de Operación",
                    ),
                ),
                (
                    "min_time",
                    models.IntegerField(
                        help_text="Tiempo mínimo en minutos",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "avg_time",
                    models.IntegerField(
                        help_text="Tiempo promedio en minutos",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "max_time",
                    models.IntegerField(
                        help_text="Tiempo máximo en minutos",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "depends_on_container_size",
                    models.BooleanField(
                        default=False,
                        help_text="¿El tiempo varía según tamaño del contenedor?",
                    ),
                ),
                (
                    "depends_on_cargo_type",
                    models.BooleanField(
                        default=False, help_text="¿El tiempo varía según tipo de carga?"
                    ),
                ),
                (
                    "depends_on_time_of_day",
                    models.BooleanField(
                        default=False, help_text="¿El tiempo varía según hora del día?"
                    ),
                ),
                (
                    "ml_predicted_time",
                    models.IntegerField(
                        blank=True, help_text="Tiempo predicho por ML", null=True
                    ),
                ),
                (
                    "ml_confidence",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                ("ml_last_update", models.DateTimeField(blank=True, null=True)),
                ("total_operations", models.IntegerField(default=0)),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_times",
                        to="core.location",
                        verbose_name="Ubicación",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tiempo de Operación",
                "verbose_name_plural": "Tiempos de Operaciones",
                "ordering": ["location__name", "operation_type"],
                "unique_together": {("location", "operation_type")},
            },
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["route_date", "status"], name="routing_rou_route_d_f83213_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="route",
            index=models.Index(
                fields=["driver", "route_date"], name="routing_rou_driver__6b3b41_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="routestop",
            index=models.Index(
                fields=["route", "stop_order"], name="routing_rou_route_i_e35097_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="routestop",
            unique_together={("route", "stop_order")},
        ),
    ]
