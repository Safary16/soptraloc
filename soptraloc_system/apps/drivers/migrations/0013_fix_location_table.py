# Generated by Django 5.2.6 on 2025-10-09 20:31

from django.db import migrations


def fix_location_table(apps, schema_editor):
    """
    Maneja el conflicto de renombrado de tabla location.
    Si core_location ya existe (producción), no hace nada.
    Si no existe, Django manejará el renombrado en 0011.
    Compatible con PostgreSQL y SQLite.
    """
    db_vendor = schema_editor.connection.vendor
    
    with schema_editor.connection.cursor() as cursor:
        # Verificar si core_location existe
        if db_vendor == 'postgresql':
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'core_location'
                );
            """)
        else:  # SQLite
            cursor.execute("""
                SELECT COUNT(*) FROM sqlite_master 
                WHERE type='table' AND name='core_location';
            """)
        core_location_exists = cursor.fetchone()[0]
        
        # Verificar si drivers_location existe
        if db_vendor == 'postgresql':
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'drivers_location'
                );
            """)
        else:  # SQLite
            cursor.execute("""
                SELECT COUNT(*) FROM sqlite_master 
                WHERE type='table' AND name='drivers_location';
            """)
        drivers_location_exists = cursor.fetchone()[0]
        
        # Si ambas existen, eliminar drivers_location (es la vieja)
        if core_location_exists and drivers_location_exists:
            print("⚠️  Ambas tablas existen. Eliminando drivers_location antigua...")
            if db_vendor == 'postgresql':
                cursor.execute("DROP TABLE IF EXISTS drivers_location CASCADE;")
            else:
                cursor.execute("DROP TABLE IF EXISTS drivers_location;")
        
        # Si solo existe drivers_location, renombrarla a core_location
        elif drivers_location_exists and not core_location_exists:
            print("✅ Renombrando drivers_location → core_location")
            cursor.execute("ALTER TABLE drivers_location RENAME TO core_location;")
        
        # Si solo existe core_location, todo bien
        elif core_location_exists:
            print("✅ core_location ya existe. No se requiere acción.")
        
        else:
            print("⚠️  Ninguna tabla location existe. Django creará core_location.")


class Migration(migrations.Migration):

    dependencies = [
        ("drivers", "0012_add_traffic_fields"),
    ]

    operations = [
        migrations.RunPython(fix_location_table, reverse_code=migrations.RunPython.noop),
    ]
